#!/usr/bin/env perl
use strict;
use warnings;

use Path::Class qw( dir file );

our $VERSION = '0.0001';

for my $module_name (@ARGV) {
    my $path_name = convert_module_to_path( $module_name );

    for my $inc_dir (@INC) {
        my $full_path = file( $inc_dir, $path_name ) . '';
        if ( -e $full_path ) {
            print $full_path, "\n";
        }
    }
}
exit;

sub convert_module_to_path {
    my ($module_name) = @_;

    return file( split /::/, $module_name . '.pm' );
}
__END__

=head1 NAME

perl-which - locate a Perl module in the user's @INC

=head1 USAGE

 $ perl-which Some::Perl::Module
 $ perl-which Some::Perl::Module Pure::AwesomeSauce Epic::Fail
 $ PERL5LIB=~/some/odd/path perl-which All::Your::Base

=head1 DESCRIPTION

C<perl-which> works much like the venerable C<which> command
but for finding Perl modules.

Matches are reported on stdout.
By default, it reports all matches, one per line, in the same
order as C<@INC>.
If no matches are found, nothing is written to stdout.

=head1 WHY?

Because using C<< perldoc -l Foo >> doesn't always work:

=over

=item * when the module doesn't have POD

=item * when the author separates the POD into its own file

=back

And I have to make sure it isn't C<-L> instead.

Besides, that isn't really what C<perldoc> is for, right?

=head1 DEPENDENCIES

=over

=item Path::Class

=back

=head1 BUGS

None so far.

=head1 AUTHOR

Richard W. Norton, <rwtnorton@gmail.com>

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
